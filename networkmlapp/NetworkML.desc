{
    # "known-attributes":["manager-introduction-text-file",
    #                     "generator-introduction-text-file",
    #                     "generator-introduction-text-file",
    #                     "managed-classes",
    #                     "manager-methods",
    #                     "generator-methods",
    #                     "instance-methods"],
    "manager-introduction-text-file": "d:/projects/GitHub/networkml/networkmlapp/NetworkML.manager.help.txt",
    "generator-introduction-text-file": "d:/projects/GitHub/networkml/networkmlapp/NetworkML.generator.help.txt",
    "instance-introduction-text-file": "d:/projects/GitHub/networkml/networkmlapp/NetworkML.instance.help.txt",

    "managed-classes": {
        "1": {
            "type": "avator",
            "globally": true
        },
        "2": {
            "type": "avator",
            "globally": true
        },
        "A": {
            "type": "created",
            "globally": true,
            "script-file": "ClazzA.nml"
        },
        "B": {
            "type": "created",
            "globally": true,
            "script-file": "ClazzB.nml"
        },
        "C": {
            "type": "created",
            "globally": true,
            "script-file": "ClazzC.nml"
        }
    },
    "manager-methods": {
        "create_managed_instance": {
            "equation": "lambda ao, c, eo, ca, ea: eo.create_managed_instance(ao, ca[0])",
            "globally": true,
            "help-text-file": "d:/projects/GitHub/networkml/networkmlapp/NetworkML.create_managed_instance.help.txt"
        },
        "managed_classes": {
            "equation": "lambda ao, c, eo, ca, ea: eo.get_managed_classes()",
            "globally": true
        },
        "managed_objects": {
            "equation": "lambda ao, c, eo, ca, ea: eo.get_managed_objects()",
            "globally": true
        },
        "contact_objects": {
            "equation": "lambda ao, c, eo, ca, ea: eo.contact_objects(ao, ca)",
            "globally": true
        },
        "get_method": {
            "equation": "lambda ao, c, eo, ca, ea: eo.get_callable_method(ao, ca)",
            "globally": true
        },
        "available_methods": {
            "equation": "lambda ao, c, eo, ca, ea: eo.available_methods(ao)",
            "globally": true
        },
        "implement_bound_method": {
            "equation": "lambda ao, c, eo, ca, ea: ao.implement_bound_methods(ca)",
            "globally": true
        },
        "get_bound_methods": {
            "equation": "lambda ao, c, eo, ca, ea: ao.get_bound_methods(c, ca)",
            "globally": true
        },
        "return_val": {
            "equation": "lambda ao, c, eo, ca, ea: eo.return_val(ca)",
            "globally": true
        },
        "read_text_file": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.read_text_file(ca[0])",
            "globally": true
        },
        "print": {
            "globally": true,
            "equation": "lambda ao, c, eo, ca, ea: eo.N.print(c, ca)"
        },
        "read_from_console": {
            "equation": "lambda ao, c, eo, ca, ea: eo.read_from_console(ao, ca[0])",
            "globally": true
        },
        "help": {
            "equation": "lambda ao, c, eo, ca, ea: eo.help(c, ca)",
            "globally": true
        },
        "function find_reachable_paths": {
            "script-file": "methods/find_reachable_paths.nml",
            "globally": true
        },
        "run": {
            "globally": true,
            "script-file": "methods/run.nml"
        },
        "run_script": {
            "globally": true,
            "script-file": "methods/run_script.nml"
        },
        "main_loop": {
            "globally": true,
            "script-file": "methods/NetworkML.main_loop.nml"
        }
    },
    "generator-methods": {
        "managed_objects": {
            "equation": "lambda ao, c, eo, ca, ea: eo.get_managed_objects(ao, ca)",
            "globally": true
        },
        "get_method": {
            "equation": "lambda ao, c, eo, ca, ea: eo.get_callable_method(ao, ca)",
            "globally": true
        },
        "available_methods": {
            "equation": "lambda ao, c, eo, ca, ea: eo.available_methods(ao)",
            "globally": true
        },
        "implement_bound_method": {
            "equation": "lambda ao, c, eo, ca, ea: ao.implement_bound_methods(ca)",
            "globally": true
        },
        "get_bound_methods": {
            "equation": "lambda ao, c, eo, ca, ea: ao.get_bound_methods(c, ca)",
            "globally": true
        },
        "read_text_file": {
            "equation": "lambda ao, c, eo, ca, ea: eo.read_text_file(ca[0])",
            "globally": true
        },
        "print": {
            "globally": true,
            "equation": "lambda ao, c, eo, ca, ea: eo.N.print(c, ca)"
        },
        "read_from_console": {
            "equation": "lambda ao, c, eo, ca, ea: eo.read_from_console(ao, ca[0])",
            "globally": true
        },
        "help": {
            "equation": "lambda ao, c, eo, ca, ea: eo.help(ao, ca)",
            "globally": true
        },
        "run": {
            "globally": true,
            "script-file": "methods/run.nml"
        },
        "run_script": {
            "globally": true,
            "script-file": "methods/run_script.nml"
        },
        "main_loop": {
            "globally": true,
            "script-file": "methods/NetworkML.main_loop.nml"
        }
    },
    "instance-methods": {
        "implement_bound_methods": {
            "equation": "lambda ao, c, eo, ca, ea: ao.implement_bound_methods(ao, ca)",
            "globally": true
        },
        "get_bound_methods_info": {
            "equation": "lambda ao, c, eo, ca, ea: ao.get_bound_methods_info(ao, ca)",
            "globally": true
        },
        "available_methods": {
            "equation": "lambda ao, c, eo, ca, ea: eo.available_methods(ao)",
            "globally": true
        },
        "read_text_file": {
            "equation": "lambda ao, c, eo, ca, ea: eo.read_text_file(ca[0])",
            "globally": true
        },
        "read_from_console": {
            "equation": "lambda ao, c, eo, ca, ea: eo.read_from_console(ao, ca[0])",
            "globally": true
        },
        "help": {
            "equation": "lambda ao, c, eo, ca, ea: eo.help(ao, ca)",
            "globally": true
        },
        "print": {
            "globally": true,
            "equation": "lambda ao, c, eo, ca, ea: eo.N.print(c, ca)"
        },
        "get_property": {
            "globally": true,
            "equation": "lambda ao, c, eo, ca, ea: eo.get_property(c, ca)"
        },
        "run": {
            "globally": true,
            "script-file": "methods/run.nml"
        },
        "run_script": {
            "globally": true,
            "script-file": "methods/run_script.nml"
        },
        "main_loop": {
            "globally": true,
            "script-file": "methods/NetworkML.main_loop.nml"
        }
    },

    // SpecificationGraph Methods
    "specgraph-methods": {
        "collect_nodes_with_candidates": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'collect_nodes_with_candidates', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.collect_nodes_with_candidates(c, ca)",
            "globally": true
        },
        "collect_edges_with_candidates": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'collect_edges_with_candidates', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.collect_edges_with_candidates(c, ca)",
            "globally": true
        },
        "node_attr_names": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'node_attr_names', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.node_attr_names(c, ca)",
            "globally": true
        },
        "edge_attr_names": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'edge_attr_names', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.edge_attr_names(c, ca)",
            "globally": true
        },
        "node_attr_values": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'node_attr_values', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.node_attr_values(c, ca)",
            "globally": true
        },
        "edge_attr_values": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'edge_attr_values', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.edge_attr_values(c, ca)",
            "globally": true
        },
        "nodes_product": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'nodes_product', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.nodes_product(c, ca)",
            "globally": true
        },
        "edges_to_nodes_product": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'edges_to_nodes_product', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.edges_to_nodes_product(c, ca)",
            "globally": true
        },
        "subtract_nodes_product": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'subtract_nodes_product', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.subtract_nodes_product(c, ca)",
            "globally": true
        },
        "nodes_product_to_edges": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'nodes_product_to_edges', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.nodes_product_to_edges(c, ca)",
            "globally": true
        },
        "project": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.project(c, ca)",
            "globally": true
        },
        "collect_edges": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'collect_edges', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.collect_edges(c, ca)",
            "globally": true
        },
        "select_nodes": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'select_nodes', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.select_nodes(c, ca)",
            "globally": true
        },
        "collect_nodes": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'collect_nodes', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.collect_nodes(c, ca)",
            "globally": true
        },
        "collect_dst_nodes": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'collect_dst_nodes', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.collect_dst_nodes(c, ca)",
            "globally": true
        },
        "cardinality": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'cardinality', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.cardinality(c, ca)",
            "globally": true
        },
        "minus": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.minus(c, ca)",
            "globally": true
        },
        #"new_node_id": {
        #    "equation": "lambda ao, c, eo, ca, ea: eo.N.new_node_id(c)",
        #    "globally": true
        #},
        #"new_node_with_constraint_args": {
        #    "equation": "lambda ao, c, eo, ca, ea: eo.N.new_node_with_constraint_args(c, ca)",
        #    "globally": true
        #},
        "edge_keys": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.edge_keys(c, ca[0], ca[1])",
            "globally": true
        },
        "newedge": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'newedge', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.newedge(c, ca)",
            "globally": true
        },
        "newnode": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'newnode', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.newnode(c, ca)",
            "globally": true
        },
        "newnodes": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'newnodes', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.newnodes(c, ca)",
            "globally": true
        },
        "newedges": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'newedges', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.newedges(c, ca)",
            "globally": true
        },
        "delnodes": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'delnodes', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.delnodes(c, ca)",
            "globally": true
        },
        "deledges": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'deledges', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.deledges(c, ca)",
            "globally": true
        },
        "trivials": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.trivials(c)",
            "globally": true
        },
        "len": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.len(c, ca)",
            "globally": true
        },
        "print": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.print(c, ca)",
            "globally": true
        },
        "load": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.load(c, ca[0])",
            "globally": true
        },
        "save": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.save(c, ca)",
            "globally": true
        },
        "getcwd": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.getcwd(c)",
            "globally": true
        },
        "chdir": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.chdir(c, ca[0])",
            "globally": true
        },
        "modelcheck": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'modelcheck', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.modelcheck(c, ca)",
            "globally": true
        },
        "set_node_attrib": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.set_node_attrib(c, ca)",
            "globally": true
        },
        "import_xlsx": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.import_xlsx(c, ca)",
            "globally": true
        },
        "load_xlsx": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.load_xlsx(c, ca)",
            "globally": true
        },
        "read_text_file": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.read_text_file(c, ca[0])",
            "globally": true
        },
        "save_text_file": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.save_text_file(c, ca[0], ca[1])",
            "globally": true
        },
        "sort": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.sort(c, ca)",
            "globally": true
        },
        "intersect": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.intersect(c, ca)",
            "globally": true
        },
        "union": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.union(c, ca)",
            "globally": true
        },
        "pull": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.pull(c, ca)",
            "globally": true
        },
        "push": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.push(c, ca)",
            "globally": true
        },
        "pop": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.push(c, ca)",
            "globally": true
        },
        "extend": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.extend(c, ca)",
            "globally": true
        },
        "concat": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.concat(c, ca)",
            "globally": true
        },
        "keys": {
            "equation": "lambda ao, c, eo, ca, ea: eo.N.keys(c, ca)",
            "globally": true
        },
        "contains": {
            "strict-verification": true,
            "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'contains', ca)",
            "equation": "lambda ao, c, eo, ca, ea: eo.N.contains(c, ca)",
            "globally": true
        }
    }
}
