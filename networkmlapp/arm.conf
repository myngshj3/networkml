# METHOD ARMER CONFIGURATION
{
    # METHOD GROUP
    "method-group": {
        "NetworkML": ["AnyObject", "MethodProvider", "Developer", "NetworkML"],
        "Developer": ["AnyObject", "Developer"],
        "UmlModeler": ["AnyObject", "Developer", "UmlModeler"],
        "UmlModel": ["AnyObject", "Developer", "UmlModeler"],
        "*": ["AnyObject"]
    },
    # METHOD DISPATCHER
    "method-dispatcher": {
        # UML Modeler methods are not prepared yet.
        "UmlModeler": {},
        # Any object
        "AnyObject": {
            "arm": {
                "globally": true,
                "equation": "lambda ao, c, eo, ca, ea: ao.arm(c)",
                "help-text": "AnyObject.arm.help.txt"
            },
            "attributes": {
                "globally": true,
                "equation": "lambda ao, c, eo, ca, ea: ao.get_attributes(c)",
                "help-text": "AnyObject.attributes.help.txt"
            },
            "embedded_attrib": {
                "globally": true,
                "equation": "lambda ao, c, eo, ca, ea: ao.embedded_attrib(c, ca)",
                "help-text": "AnyObject.embedded_attrib.help.txt"
            },
            "invoke": {
                "globally": true,
                "equation": "lambda ao, c, eo, ca, ea: ao.invoke(c, ca[0], ca[1:])",
                "help-text": "AnyObject.invoke.help.txt"
            }
        },
        # Method Providers (who give and remove method)
        "MethodProvider": {
            "provide_method": {
                "equation": "lambda ao, c, eo, ca, ea: ca[0].declare_method(ca[1], globally=True)",
                "globally": true
            },
            "get_method": {
                "equation": "lambda ao, c, eo, ca, ea: ca[0].get_method(c, ca[1])",
                "globally": true
            },
            "remove_method": {
                "equation": "lambda ao, c, eo, ca, ea: ca[0].remove_method(c, ca[1])",
                "globally": true
            }
        },
        # Ordinary developers (who write algorithm)
        "Developer": {
            "type": {
                "equation": "lambda ao, c, eo, ca, ea: type(ca[0])",
                "globally": true
            },
            "len": {
                "equation": "lambda ao, c, eo, ca, ea: len(ca[0])",
                "globally": true
            },
            "join": {
                "equation": "lambda ao, c, eo, ca, ea: ca[0].join(ca[1:])",
                "globally": true
            },
            "append": {
                "equation": "lambda ao, c, eo, ca, ea: ca[0].append(ca[1])",
                "globally": true
            },
            "push": {
                "equation": "lambda ao, c, eo, ca, ea: ca[0].append(ca[1])",
                "globally": true
            },
            "pull": {
                "equation": "lambda ao, c, eo, ca, ea: ca[0].pop(0)",
                "globally": true
            },
            "pop": {
                "equation": "lambda ao, c, eo, ca, ea: ca[0].pop(len(ca[0])-1)",
                "globally": true
            },
            "nth": {
                "equation": "lambda ao, c, eo, ca, ea: ca[0][ca[1]]",
                "globally": true
            },
            "extend": {
                "equation": "lambda ao, c, eo, ca, ea: ca[0].extend(ca[1])",
                "globally": true
            },
            "rmkey": {
                "equation": "lambda ao, c, eo, ca, ea: ca[0].pop(ca[1])",
                "globally": true
            },
            "concat": {
                "equation": "lambda ao, c, eo, ca, ea: ''.join(['{}'.format(_) for _ in ca])",
                "globally": true
            },
            "list": {
                "equation": "lambda ao, c, eo, ca, ea: list(ca[0])",
                "globally": true
            },
            "tuple": {
                "equation": "lambda ao, c, eo, ca, ea: tuple(ca[0])",
                "globally": true
            },
            "keys": {
                "equation": "lambda ao, c, eo, ca, ea: tuple([_ for _ in ca[0].keys()])",
                "globally": true
            },
            "contains": {
                "equation": "lambda ao, c, eo, ca, ea: ca[1] in ca[0]",
                "globally": true
            },
            "sort": {
                "equation": "lambda ao, c, eo, ca, ea: ca[0].sort(reverse=ca[1])",
                "globally": true
            },
            "push_stack": {
                "equation": "lambda ao, c, eo, ca, ea: ao.push_stack(c)",
                "globally": true
            },
            "pop_stack": {
                "equation": "lambda ao, c, eo, ca, ea: ao.pop_stack(c)",
                "globally": true
            },
            "has_attrib": {
                "equation": "lambda ao, c, eo, ca, ea: ao.has_attribute(c, ca[0])",
                "globally": true
            },
            "has_embedded_attrib": {
                "equation": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, ca[0])",
                "globally": true
            },
            "print": {
                "globally": true,
                "equation": "lambda ao, c, eo, ca, ea: ao.print(c, ca)"
            },
            "eval": {
                "equation": "lambda ao, c, eo, ca, ea: eval(''.join([str(_) for _ in ca]))",
                "globally": true
            },
            "Attr": {
                "globally": true,
                "equation": "lambda ao, c, eo, ca, ea: ao.Attr(c, ca)"
            }
        },
        # NetworkML Developers (who write in NetworkML)
        "NetworkML": {
            # Nodes with selectable candidates and condition.
            "SpecGraph": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "SpecNodes": {
                "equation": "lambda ao, c, eo, ca, ea: [_ for _ in ao.SpecGraph.nodes]",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "SpecNodesData": {
                "equation": "lambda ao, c, eo, ca, ea: [_ for _ in ao.SpecGraph.nodes(data=True)]",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "SpecDsts": {
                "equation": "lambda ao, c, eo, ca, ea: [_ for _ in ao.SpecGraph[ca[0]]]",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "SpecEdges": {
                "equation": "lambda ao, c, eo, ca, ea: [_ for _ in ao.SpecGraph.edges]",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "SpecEdgesData": {
                "equation": "lambda ao, c, eo, ca, ea: [_ for _ in ao.SpecGraph.edges(keys=True, data=True)]",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "specgraph": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "collect_nodes_with_candidates": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.SpecGraph.check_args_requirement(c, 'collect_nodes_with_candidates', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.collect_nodes_with_candidates(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Edges with selectable candidates and condition.
            "collect_edges_with_candidates": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').check_args_requirement(c, 'collect_edges_with_candidates', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.collect_edges_with_candidates(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Node's attribute names.
            "node_attr_names": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').check_args_requirement(c, 'node_attr_names', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.node_attr_names(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Edge's attribute names.
            "edge_attr_names": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').check_args_requirement(c, 'edge_attr_names', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.edge_attr_names(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Node's attribute values.
            "node_attr_values": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').check_args_requirement(c, 'node_attr_values', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.node_attr_values(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Edge's attribute values.
            "edge_attr_values": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').check_args_requirement(c, 'edge_attr_values', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.edge_attr_values(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Generates node product( pairs of (u,v)).
            "nodes_product": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').check_args_requirement(c, 'nodes_product', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.nodes_product(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Generates edges with given edge structure.
            "edges_to_nodes_product": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').check_args_requirement(c, 'edges_to_nodes_product', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.edges_to_nodes_product(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Generates node product subtracted another.
            "subtract_nodes_product": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').check_args_requirement(c, 'subtract_nodes_product', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.subtract_nodes_product(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "nodes_product_to_edges": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').check_args_requirement(c, 'nodes_product_to_edges', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.nodes_product_to_edges(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Projection function.
            "project": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.project(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Collect edges.
            # "collect_edges": {
            #     "strict-verification": true,
            #     "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'collect_edges', ca)",
            #     "equation": "lambda ao, c, eo, ca, ea: eo.N.collect_edges(c, ca)",
            #     "preprocess": "lambda ao, c, eo, ca, ea: 'SpecGraph' in ao.embedded_attrib(c).keys()",
            #     "globally": true
            # },
            # Collect edges.
            "edges": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.SpecGraph.check_args_requirement(c, 'collect_edges', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.collect_edges(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Collect nodes with given condition and criteria.
            # "select_nodes": {
            #     "strict-verification": true,
            #     "args-validator": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').check_args_requirement(c, 'select_nodes', ca)",
            #     "equation": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').select_nodes(c, ca)",
            #     "preprocess": "lambda ao, c, eo, ca, ea: 'SpecGraph' in ao.embedded_attrib(c).keys()",
            #     "globally": true
            # },
            # Collect nodes with given condition and criteria.
            # "collect_nodes": {
            #     "strict-verification": true,
            #     "args-validator": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').check_args_requirement(c, 'collect_nodes', ca)",
            #     "equation": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').collect_nodes(c, ca)",
            #     "preprocess": "lambda ao, c, eo, ca, ea: 'SpecGraph' in ao.embedded_attrib(c).keys()",
            #     "globally": true
            # },
            # Collect nodes with given condition and criteria.
            "nodes": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.SpecGraph.check_args_requirement(c, 'collect_nodes', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.collect_nodes(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Collect dst nodes with given condition and criteria.
            # "collect_dst_nodes": {
            #     "strict-verification": true,
            #     "args-validator": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').check_args_requirement(c, 'collect_dst_nodes', ca)",
            #     "equation": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').collect_dst_nodes(c, ca)",
            #     "preprocess": "lambda ao, c, eo, ca, ea: 'SpecGraph' in ao.embedded_attrib(c).keys()",
            #     "globally": true
            # },
            # Collect dst nodes with given condition and criteria.
            "dst_nodes": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.SpecGraph.check_args_requirement(c, 'collect_dst_nodes', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.collect_dst_nodes(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # cardinality of a given set.
            "cardinality": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.SpecGraph.check_args_requirement(c, 'cardinality', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.cardinality(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # minus.
            "minus": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.minus(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Create new edge with given properties.
            "newedge": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.SpecGraph.check_args_requirement(c, 'newedge', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.newedge(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Create new edge with given properties.
            "newnode": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.SpecGraph.check_args_requirement(c, 'newnode', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.newnode(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Create new nodes with given properties.
            "newnodes": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.SpecGraph.check_args_requirement(c, 'newnodes', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.newnodes(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Create new nodes with given properties.
            "newedges": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.SpecGraph.check_args_requirement(c, 'newedges', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.newedges(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Deletes nodes with given condition.
            "delnodes": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.SpecGraph.check_args_requirement(c, 'delnodes', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.delnodes(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Deletes edges with given condition.
            "deledges": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.SpecGraph.check_args_requirement(c, 'deledges', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.deledges(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            # Collects trivial nodes.
            "trivials": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.trivials(c)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "load": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.load(c, ca[0])",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "save": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.save(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "getcwd": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.getcwd(c)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "chdir": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.chdir(c, ca[0])",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "modelcheck": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.SpecGraph.check_args_requirement(c, 'modelcheck', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.modelcheck(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "set_node_attrib": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.set_node_attrib(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "import_xlsx": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.import_xlsx(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "load_xlsx": {
                "strict-verification": true,
                "args-validator": "lambda ao, c, eo, ca, ea: ao.SpecGraph.check_args_requirement(c, 'load_xlsx', ca)",
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.load_xlsx(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "read_text_file": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.read_text_file(c, ca[0])",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "save_text_file": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.save_text_file(c, ca[0], ca[1])",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "rd": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.read_text_file(c, ca[0])",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "wr": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.save_text_file(c, ca[0], ca[1])",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "intersect": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.intersect(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            },
            "union": {
                "equation": "lambda ao, c, eo, ca, ea: ao.SpecGraph.union(c, ca)",
                "preprocess": {
                    "1": "lambda ao, c, eo, ca, ea: ao.has_embedded_attrib(c, 'SpecGraph')",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "postprocess": {
                    "1": "lambda ao, c, eo, ca, ea: True",
                    "2": "lambda ao, c, eo, ca, ea: True",
                    "3": "lambda ao, c, eo, ca, ea: True"
                },
                "globally": true
            }
            # "pull": {
            #    "equation": "lambda ao, c, eo, ca, ea: ao.get_method(c, 'specgraph').pull(c, ca)",
            #    "preprocess": "lambda ao, c, eo, ca, ea: 'SpecGraph' in ao.embedded_attrib(c).keys()",
            #    "globally": true
            # }
            # "push": {
            #    "equation": "lambda ao, c, eo, ca, ea: eo.N.push(c, ca)",
            #    "preprocess": "lambda ao, c, eo, ca, ea: 'SpecGraph' in ao.embedded_attrib(c).keys()",
            #    "globally": true
            # },
            # "pop": {
            #     "equation": "lambda ao, c, eo, ca, ea: eo.N.pop(c, ca)",
            #     "preprocess": "lambda ao, c, eo, ca, ea: 'SpecGraph' in ao.embedded_attrib(c).keys()",
            #     "globally": true
            # },
            # "rmkey": {
            #     "equation": "lambda ao, c, eo, ca, ea: ca[0].pop(ca[1])",
            #     "preprocess": "lambda ao, c, eo, ca, ea: 'SpecGraph' in ao.embedded_attrib(c).keys()",
            #     "globally": true
            # },
            # "extend": {
            #     "equation": "lambda ao, c, eo, ca, ea: eo.N.extend(c, ca)",
            #     "preprocess": "lambda ao, c, eo, ca, ea: 'SpecGraph' in ao.embedded_attrib(c).keys()",
            #     "globally": true
            # },
            # "concat": {
            #     "equation": "lambda ao, c, eo, ca, ea: eo.N.concat(c, ca)",
            #     "preprocess": "lambda ao, c, eo, ca, ea: 'SpecGraph' in ao.embedded_attrib(c).keys()",
            #     "globally": true
            # },
            #"keys": {
            #    "equation": "lambda ao, c, eo, ca, ea: eo.N.keys(c, ca)",
            #    "preprocess": "lambda ao, c, eo, ca, ea: 'SpecGraph' in ao.embedded_attrib(c).keys()",
            #    "globally": true
            #},
            # "contains": {
            #     "strict-verification": true,
            #     "args-validator": "lambda ao, c, eo, ca, ea: eo.N.check_args_requirement(c, 'contains', ca)",
            #     "equation": "lambda ao, c, eo, ca, ea: eo.N.contains(c, ca)",
            #     "preprocess": "lambda ao, c, eo, ca, ea: 'SpecGraph' in ao.embedded_attrib(c).keys()",
            #     "globally": true
            # }
        }
    }
}